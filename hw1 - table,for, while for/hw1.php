<?php 
//Задание 1 
//Задача на цикл(ы) for: Вывести таблицу умножения, чтобы получилось:

//без отладчика должно отображаться номально
for ($i=1; $i<10; $i++) {
	for ($n=1; $n < 11; $n++) { 
		var_dump($i*$n . " ");
	}
	var_dump("<br>");
};

//Задание 2
//Дано:
// $x - количество километров, которые спортсмен пробежал в первый день
// $y - количество километров.  По данному числу нужно определить номер дня.
// В первый день спортсмен пробежал $x километров, а затем он каждый день увеличивал пробег на 10% от предыдущего значения. По заданному числу $y определить номер дня, на который пробег спортсмена составит не менее $y километров.
$x = 10;
$y = 21;

for ($i = 1; $y > 0; ++$i) {
	$y-=$x;
	$x*=1.1;
	if ($y <= 0) var_dump($i);
};

// Задание 3
// Задача на while или for. Дано число $num=800. Делите его на 2 столько раз, пока результат деления не станет меньше 50. Какое число получится? Посчитайте количество итераций, необходимых для этого (итерация - это проход цикла).
$num = 800;
for ($i=1; $num>=50; $i++) { 
	$num/=2;
	if ($num < 50) var_dump($i);
};


//4 Посмотреть функции для работы с массивами и ответить на следующие вопросы (это задание проверим в начале занятия):

// 4.1 С помощью какой функции можно разбить данный массив на переменные $title и $pageCount:
// $book = ['title'=>'PHP 7',
//          'pageCount' => 342];
// если правильно понял, то функция: extract - создается переменная с названием ключа и ему присвается соответствующее значение

$book = ['title'=>'PHP 7',
         'pageCount' => 342];

   extract($book);
   echo "$title";  

//4.2 Функция, которая возвращает количество элементов в массиве?
 // count — Подсчитывает количество элементов массива или чего-либо в объекте
   var_dump(count($book));
//    $food = array('fruits' => array('orange', 'banana', 'apple'),
//               'veggie' => array('carrot', 'collard', 'pea'));

// // рекурсивный подсчет
// echo count($food, COUNT_RECURSIVE); // выводит 8

// // обычный подсчет
// echo count($food); // выводит 2

 //4.3 Как проверить наличие значения в массиве?
   //in_array
   $arr = [90, 53, 132];
   var_dump(in_array(54, $arr));
  //4.4 Чем отличаются array_replace_recursive и array_replace?
//   array_replace_recursive — Рекурсивно заменяет элементы первого массива элементами переданных массивов
// array_replace — Заменяет элементы массива элементами других переданных массивов

//Нее рекурсивный пример
// $base = array("orange", "banana", "apple", "raspberry");
// $replacements = array(0 => "pineapple", 4 => "cherry");
// $replacements2 = array(0 => "grape");

// $basket = array_replace($base, $replacements, $replacements2);
// print_r($basket);

//    array_replace_recursive() заменяет значения массива array1 на соответствующие по ключам значения из всех следующих массивов. Если ключ из первого массива есть во втором, его значение будет заменено на значение из второго массива. Если ключ есть во втором массиве, но отсутствует в первом, он будет создан в первом массиве. Если ключ есть только в первом массиве, то он остается как есть. Если передано несколько массивов, они будут обработаны по порядку, последующие перезаписывают предыдущие значения.

// array_replace_recursive() - рекурсивная функция: она будет рекурсивно углубляться в массивы и применять к всем внутренним значениям один и тот же процесс.

 //Т.е. если значение одного из ключей более углубленный массив, то рекурсивная функция будет заменять значения во внутренних массивах

  //4.5 Как работает функция compact?
// compact — Создает массив, содержащий названия переменных и их значения

   //Т.е. пишем названия переменных в функцию компакт через ",", создается новый массив, где ключ - название переменной, а его значение - присвоенное значение этой переменной.

  $city  = "San Francisco";
$state = "CA";
$event = "SIGGRAPH";

$new_arr=compact("city", "state");
var_dump($new_arr);


//Отсортировать массив, который находится в файле lesson2/task.php, по 'price'. При решении использовать функции для работы с массивами.

$arr = [
    '1'=> [
        'price' => 10,
        'count' => 2
    ],
    '2'=> [
        'price' => 5,
        'count' => 5
    ],
    '3'=> [
        'price' => 8,
        'count' => 5
    ],
    '4'=> [
        'price' => 12,
        'count' => 4
    ],
    '5'=> [
        'price' => 8,
        'count' => 4
    ],
];
//array_multisort — Сортирует несколько массивов или многомерные массивы

$price  = array_column($arr, 'price');


array_multisort($price, SORT_ASC, $arr);
var_dump($arr);

 ?>